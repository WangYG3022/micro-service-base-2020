server:
  port: 80

spring:
  application:
    name: hystrix-order-service

eureka:
  instance:
    instance-id: hystrix-order-80
    #访问路径可以显示IP地址
    prefer-ip-address: true
  client:
    # 这里只把feign做客户端用，不注册进eureka
    register-with-eureka: false
    fetch-registry: true
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka

# 打开Feign的Hystrix熔断功能
feign:
  hystrix:
    enabled: true

# 设置Hystrix的time-out时间
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # 设置超时熔断时间（spring-cloud-starter-openfeign中的HystrixCommandProperties默认为1000毫秒）
            timeoutInMilliseconds: 6000
        timeout:
          # 是否开始超时熔断，如果为false，则熔断机制只在服务不可用时开启（spring-cloud-starter-openfeign中的HystrixCommandProperties默认为true）
          enabled: true
# https://blog.csdn.net/hhj13978064496/article/details/104653297
# 如何配置好Hystrix和Ribbon的超时时间呢？
# 其实是有套路的,因为Feign的请求：其实是Hystrix+Ribbon。Hystrix在最外层，然后再到Ribbon，最后里面的是http请求。
# 所以说。Hystrix的熔断时间必须大于Ribbon的 ( ConnectTimeout + ReadTimeout )。
# 而如果Ribbon开启了重试机制，还需要乘以对应的重试次数，保证在Ribbon里的请求还没结束时，Hystrix的熔断时间不会超时。